{
  "openapi": "3.0.0",
  "info": {
    "title": "Whereby",
    "version": "1.0.0",
    "description": "Whereby API"
  },
  "servers": [
    {
      "url": "https://api.whereby.dev/v1",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "The bearer token will be provided upon request and it is up to the client to keep it secret. Every api call needs to contain this token in order to authenticate and authorize the client.\n"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      },
      "NotFoundError": {
        "description": "The requested resource doesn't exist"
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "parameters": {
      "meetingId": {
        "name": "meetingId",
        "in": "path",
        "description": "meeting ID.",
        "required": true,
        "example": "1"
      }
    },
    "schemas": {
      "Fields": {
        "type": "array",
        "items": {
          "type": "string,",
          "enum": [
            "hostRoomUrl"
          ]
        },
        "description": "Additional fields that should be populated.\n- `hostRoomUrl` - Include hostRoomUrl field in the meeting response.\n"
      },
      "Meeting": {
        "type": "object",
        "required": [
          "meetingId",
          "roomUrl",
          "startDate",
          "endDate"
        ],
        "properties": {
          "meetingId": {
            "type": "string",
            "description": "The ID of the meeting."
          },
          "roomUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to room where the meeting will be hosted."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "When the meeting starts."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "When the meeting ends."
          },
          "hostRoomUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to room where the meeting will be hosted which will also make the user the host of the\nmeeting. A host will get additional privileges like locking and recording, and you should therefore\nbe careful with whom you share this URL. The user will only become a host if the meeting is on-going (some additional\nslack is added to allow a host joining the meeting ahead of time or if the meeting goes over time).\nThis field is optional and will only provided if requested through fields parameter.\n"
          }
        },
        "example": {
          "meetingId": "1",
          "startDate": "2020-05-12T16:42:49Z",
          "endDate": "2020-05-12T17:42:49Z",
          "roomUrl": "http://example.com"
        }
      }
    }
  },
  "paths": {
    "/meetings": {
      "post": {
        "summary": "Create meeting",
        "description": "Creates a meeting as specified.\nIt will also create a transient room that is guaranteed to be available for specified start and end time. Some time after the meeting has ended, the transient room will be automatically deleted.\nThe URL to this room is present in the response.\n",
        "requestBody": {
          "description": "Meeting to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "startDate",
                  "endDate"
                ],
                "properties": {
                  "roomNamePrefix": {
                    "type": "string",
                    "maxLength": 40,
                    "pattern": "[/][a-z0-9]{0,39}",
                    "example": "/example-prefix",
                    "description": "This will be used as the prefix for the room name. Note that the room name needs to start with /\nif it is provided and should be lower-case.\n"
                  },
                  "roomMode": {
                    "type": "string",
                    "default": "normal",
                    "enum": [
                      "group",
                      "normal"
                    ],
                    "example": "normal",
                    "description": "The mode of the created transient room.\n`normal` is the default room mode and should be used for meetings up to 4 participants.\n`group` should be used for meetings that require more than 4 participants.\n"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the meeting starts. This has to be newer than the current date."
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the meeting ends. This has to be the same or after the startDate."
                  },
                  "fields": {
                    "$ref": "#/components/schemas/Fields"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/meetings/{meetingId}": {
      "delete": {
        "summary": "Delete meeting",
        "description": "Deletes the specified meeting. The endpoint is idempotent, meaning it will return the same response even if the meeting has already been deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/meetingId"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "Get meeting",
        "description": "Returns the specified meeting.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/meetingId"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "$ref": "#/components/schemas/Fields"
            },
            "explode": false,
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object representing the meeting.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "tags": []
}